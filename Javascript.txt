############################################################################################

javascript bir web geliştirme dilidir. script language olarak geçer, cross çalışır. javasciprt html tabanlı bir web sitesine animasyonlar, onclick eventleri, interactiveness ve taraıcı üstünde yani client ekranında db erişmeden direk ekranda aktif olarak çalışabilen bir dildir. interpreted - yorumlanan bir dildir.

Obfuscation in Action --> js kodları tarayıca hashlenir bu hashleri decrpty edebiliriz.


js temelleri;
    - 3 ana değişkenle çalışır, var-let-const, 
        var- funcition bazlı çalışır
        let-const -block bazlı çalışır
    
    data tipleri; string-number-boolean-null-undefined-object

    function; fonksiyonlar python gibi belirteçle tanımlanır;
        <script>
            function PrintResult(rollNum) {
                alert("Username with roll number " + rollNum + " has passed the exam");
                // any other logic to display the result
            }

            for (let i = 0; i < 100; i++) {
                PrintResult(rollNumbers[i]);
            }
        </script>

    loops; klasik for - while - foreach - do while  loopları vardır.
            c# gibi tanımlanır

-- java scripti html e entegre etmenin 2 yolu vardır "internally - externally"

    internally-internal --> <script>  </script> arasına yazdığımız js kodlarıdır
    externally-external --> <script src="script.js"></script> bu şekilde başka bir dosyayı nitelendirdiğimizdir.

-- input aldığımız yada dialoge içeren 3 tip vardır
    -alert
        alert("HelloTHM");
    -prompt
        prompt("What is your name?");
    -Confirm
        confirm("Are you sure?");

-- flow statement - if-else-switch case

#####################################################################################################
ECMAScript --> java script versiyonlarıdır 1 2 3 4 5 6 7 diye versiyonları var fakat bütün tarayıcılar 5i destekliyor 6-7 i tam anlamıyla desteklemiyorlar fakat 6 ve 7 versiyonlarını bazı kütüphaneler aracılığıyla dönüştürüp 5 olarak çalıştırabiliyoruz.

Değişkenler;

    let --> blok kapsamlı Değişkenler, let değiştirilebilir dinamiktir fakat tekrar tanımlama yapılmaz böylece hata yapmamızı önler
    const --> blok kapsamlı statik Değişkenler, değişmez sabittir.
    var --> eski, kapsamlı fonksiyon //değişken tanımlandı aynı isimle tekrar tanımlandığında değişken değişiyor bu bir sorun. var bug lı for içindeki değişkene hatta for değişkenine erişebiliyoruz scope'u aşıyor

        let name = "Ali";    // String
        const age = 25;      // Number
        let isActive = true; // Boolean
        let cars = ["BMW", "Audi"]; // Array
        let user = { name: "Ali", age: 25 }; // Object
        let value = null;    // Null
        let x;               // Undefined

Aritmetik operatörler;

    let a = 10, b = 3;
    a + b; // 13 (Toplama)
    a - b; // 7  (Çıkarma)
    a * b; // 30 (Çarpma)
    a / b; // 3.33 (Bölme)
    a % b; // 1  (Mod)
    a ** b; // 1000 (Üs alma)
    a++; // 11 (1 Arttırma)
    b--; // 2  (1 Azaltma)

Karşılaştırma operatörleri;

    a == b;  // Eşit mi? (değer)
    a === b; // Tam eşit mi? (değer + tür)
    a != b;  // Eşit değil mi?
    a > b;   // Büyük mü?
    a < b;   // Küçük mü?

Mantıksal operatörler;

    true && false; // AND → false
    true || false; // OR → true
    !true;         // NOT → false


if-else şart blockları;
    let age = 18;
    
    if (age >= 18) {
    console.log("Ehliyet alabilirsiniz.");
    } else {
    console.log("Yaşınız yetersiz.");
    }

ternary operator;

    let result = age >= 18 ? "Ehliyet alabilir" : "Alamaz";
    console.log(result);

switch-case operatörü;

    let day = 2;
    switch (day) {
    case 1: console.log("Pazartesi"); break;
    case 2: console.log("Salı"); break;
    default: console.log("Bilinmeyen gün");
    }

döngüler;

    for;
        for (let i = 0; i < 5; i++) {
        console.log(i); // 0, 1, 2, 3, 4
        }

    while;
        let i = 0;

        while (i < 5) {
        console.log(i);
        i++;
        }

    for ... of;
        let cars = ["BMW", "Audi"];

        for (let car of cars) {
        console.log(car);
        }

    for ... in;
        let user = { name: "Ali", age: 25 };
        
        for (let key in user) {
        console.log(key, user[key]);
        }


template-şablon- düzeni;

    const name = "ahmet";
    const greeting = 'Merhaba, ${name}!'; --> statik değişkeni kısmi dinamil yapmış oluruz.
    console.log(greeting);

arrow funct;

    //fonksiyon tanımı
    function toplam(a,b){
        return a+b;
    }

    //ok tipi fonksiyon tanımı
    const toplam = (a,b) => a+b;

    console.log(toplam(2,3));

    //tek parametreli
    const kare = x => x*x;

dizi;
    
    const [first,second] = [10,20];
    console.log(first);
    console.log(second);

    let fruits = ["Elma", "Armut", "Muz"];
    console.log(fruits[0]); // Elma
    fruits.push("Kivi");      // Sona ekle
    fruits.pop();             // Sondan sil
    fruits.shift();           // Baştan sil
    fruits.unshift("Çilek");  // Başa ekle
    fruits.indexOf("Armut");  // 1
    fruits.includes("Muz");   // true


nesne;

    const person = {name: "ahmet", age:30};
    const {name, age} = person;

    // Özellik Ekleme
    person.city = "Ankara";

    console.log(name);
    console.log(age);

spread ile birleştirme;
    
    //dizilerde
    const arr1 = [1, 2, 3,];
    const arr2 = [...ar1, 4, 5];

    console.log(arr2);

    //nesnelerde
    const person = {name:"ali"};
    const updatedPerson = {...person, age:25};
     console.log(updatedPerson);

rest parametre --fonksiyonlara sınırsız parametre geçişi sağlar.-;

    const toplam = (...numbers) => {
        return numbers.reduce((a, b) => a+b,0);
    }

    console.log(toplam(1,2,3,4));


default parametre;

    const greet = (name = "Ziyaretçi") => {
        console.log('Merhaba, ${name}!');
    }

    greet(); --> default olaran ziyaretçiyi söyler
    greet("ali"); --> aliyi söyler

classlar;

    class Person{
        constructor(name, age){
            this.name = name;
            this.age = age;
        }

        introduce() {
            console.log('Merhaba, ben ${this.name}, ${this.age} yaşındayım.');
        }
    }

    const person1 = new Person("Ahmet", 25);
    person1.introduce();


promises;

    **Asenkron işlemler için kullanılır.

    const fetchData = () => {
        return new Promise((resolve, reject) => {
            setTimeout(() => resolve("veri alındı"), 1000);
        });
    };

    fetchData()
        .then(data => console.log(data))
        .catch(err => console.error(err));

Async/Await;
    **Asenkron işlemleri daha düzgün yapar


    const fetchData = () => {
        return new Promise(resolve => {
            setTimeout(() => resolve("veri alındı"), 1000);
        });
    };

    const getData = async () => {
        const data = await fetchData();
        console.log(data)
    };

    getData();


moduller;

    dosya çıkarma-export-;

        export const sum = (a, b) => a+b;
        export const PI = 3.14;

    dosya içe aktarma -import-;

        //app.js
        import {sum, PI} from './math.js';

        console.log(sum(2,3));
        console.log(PI);

map, filter, reduce;

    map; --> her eleman üzerinde işlem yapar
        const numbers = [1, 2, 3];
        const doubled = numbers.map(n => n * 2);
        console.log(doubled);

    fiter; --> şarta uyan elemanları döner
        const numbers = [1, 2, 3, 4];
        const even = number.filter(n => n % 2 == 0);
        console.log(even);

    reduce; --> tüm elemanları tek değere indirir.
        const numbers = [1, 2, 3, 4];
        const sum = numbers.reduce((total, n) => total + n, 0);
        console.log(sum);

string methodları;
    
    includes() --> içerip içermediğine bakar

        const text = "Merhaba dünya!";
        console.log(text.includes("dünya"));

    startsWith() & endsWith() --> başlangıcını veya bitişini test eder.
        console.log(text.startsWith("merhaba"));
        console.log(text.endsWith("dünya"));

array methodları;

    find() --> bulma methodu

        const numbers = [1, 2, 3, 4, 5];
        const result = numbers.find(n => n > 2);
        console.log(result);

    findIndex() --> indexdeki değeri bulma

        const result = numbers.findIndex(n => n > 2);

    ? optional chanining;

        const user = {name: "ali", address: {city: "ankara}};
        console.log(user.address?.city);
        console.log(user.contact?.phone);

    Object.Keys ve Object.values; --> keys anahtarları döner value değerleri döner

        const user = { name: "Ali", age: 25 };
        console.log(Object.keys(user)); // ["name", "age"]
        console.log(Object.values(user)); // ["Ali", 25]

    Object.entries; --> anahtar çiftini döner

        console.log(Object.entries(user));
        // [["name", "Ali"], ["age", 25]]


        
Dom manipilasyonu -Data Object Models-;
   ** dom sayesinde valueları alır üzerinde işlemler yapabiliriz. 
    *Eleman Seçme;
        document.getElementById("id"); --> id ye göre alışverişi
        document.getElementByClassName("") --> class ına göre alır //css şeklinde tanımlanan classların etiketlendiği yerlerdeki elemanları çeker.
        document.getElementByName("") --> element adına göre
        document.getElementByTagName("") --> html tag içinde tanımlanan name tagina göre ulaşır
        document.getElementByTagNameNS("") --> ?
        document.querySelector(".class");
    
    *Eleman değiştirme;
        let el = document.querySelector("h1");
        el.textContent = "Yeni Başlık";
        el.style.color = "red";

    *Olay ekleme;
        el.addEventListener("click", () => {
        alert("Başlığa tıkladınız!");
        });

    QuerySelectorAll;
        ** belirli bir html elementinin filtrelemek için kullanılır. p etiketini kullanan class 'ı intro olanları getir gibi.

        var queryElements = document.QuerySelectorAll("p.intro1")

    addEventListener;
    //googlea doms event yazınca daha fazlasını bulabiliriz sadece click yok.
        var salih = document.getElementById("Salih").addEventListener("click",rengidegistir);

        funcition rengidegistir(){
            document.getElementsById("div1").style.color ="red";
        }

    Node -parent child mantığı ile alt elementlere erişip veri okuma değiştirme yapabilir-
        
        child ile erişim;

        var node = document.getElementById("agac"); //ağaç grubuna eriştik
        alert(node.childNodes[0].nodeValue); //ağaç grubunun altındaki veriyi okuduk
        ------------------------------------------------------------------------------
        child ile veri ekleme;

        var baslik = document.createElement("h2"); //baslik objesine h2 elementini oluşturduk
        var node = document.createTextNode("Merhaba JavaScript"); //node objesine text verisi oluşturduk

        baslik.appendChild(node) // başlık objesini node objesinin child'i yaptık

        var div1 = document.getElementById("div1") //div1 ' e eriştik
        var p2 = document.getElementById("p2") // p2 ' e eriştik

        div1.insertBefore(baslik,p2) //div1 in içine baslik elementi ekle ama p2 den önce ekle
        ----------------------------------------------------------------------------------
        child ile veri silme;

        alert("p2 siliniyor") //alert verdik
        div1.removeChild(p2) //p2 yi siliyoruz
        -----------------------------------------------------------------------------------
        child ile veri değiştirme;
        
        alert("değiştiriliyor");  //alert verdik
        var p1 = document.getElementById("p1") //p1 e eriştik
        div1.replaceChild(baslik,p1)  // başlığı p1 in önüne taşıdık.


Zamanlayıcılar;

    setTimeout(() => console.log("2 saniye sonra"), 2000); // Tek seferlik
    setInterval(() => console.log("Her saniye"), 1000);   // Döngüsel

Hata yönetimi;

    try {
      throw new Error("Bir hata oluştu!");
    } catch (error) {
      console.log(error.message);
    } finally {
      console.log("Her durumda çalışır.");
    }


Higher Order Functions (Yüksek Seviye Fonksiyonlar);
    **Bir fonksiyonun başka bir fonksiyonu parametre olarak alması veya geri döndürmesi durumudur.

    const calculate = (a, b, operation) => {
        return operation(a, b);
    };

    const add = (x, y) => x + y;
    const subtract = (x, y) => x - y;

    console.log(calculate(5, 3, add));       // 8
    console.log(calculate(5, 3, subtract));  // 2

Closures (Kapanışlar);
    **Bir iç fonksiyonun, dış fonksiyonun değişkenlerine erişebilmesidir.

        function outer() {
            let count = 0;

            return function inner() {
                count++;
                return count;
            };
        }

        const counter = outer();
        console.log(counter()); // 1
        console.log(counter()); // 2

Immediately Invoked Function Expressions (IIFE);
    **Fonksiyonun tanımlandığı anda çalıştırılması.

        (function() {
            console.log("Bu bir IIFE!");
        })();

Tarih;
    const now = new Date();
    console.log(now.toDateString());  // "Mon Jun 10 2024"
    console.log(now.toISOString());   // "2024-06-10T12:00:00Z"
    console.log(now.getFullYear());   // 2024
    console.log(now.getMonth());      // 0-11 (Ocak = 0)


Fetch ile GET isteği;

    fetch("https://jsonplaceholder.typicode.com/posts/1")
    .then(response => response.json())
    .then(data => console.log(data))
    .catch(error => console.error("Hata:", error));

    Async/Await ile FETCH;

        const getData = async () => {
        try {
            const response = await fetch("https://jsonplaceholder.typicode.com/posts/1");
            const data = await response.json();
            console.log(data);
        } catch (error) {
            console.error("Hata:", error);
        }
        };
        getData();

Local storage --> tarayıcıda veri saklama;
    Local storage;
        localStorage.setItem("name", "Ali");
        console.log(localStorage.getItem("name")); // "Ali"
        localStorage.removeItem("name");

    Session storage;
        sessionStorage.setItem("name", "Ali");
        console.log(sessionStorage.getItem("name"));


Event delegation;
      **Bir olay dinleyicisini doğrudan alt elemanlara atamak yerine üst elemente eklemek.

            document.querySelector("#parent").addEventListener("click", e => {
            if (e.target && e.target.matches("button")) {
                console.log("Butona tıklandı!");
            }
            });


Debouncing (Yüksek Performanslı Input);
        **Bir olayın sık tetiklenmesini önler.

        function debounce(func, delay) {
            let timer;
            return function(...args) {
                clearTimeout(timer);
                timer = setTimeout(() => func(...args), delay);
            };
        }

        const onSearch = debounce(() => console.log("Arama yapılıyor..."), 300);
        document.querySelector("input").addEventListener("input", onSearch);






##JSON##
________
    Json nedir -->
        **JSON (JavaScript Object Notation), veriyi yapılandırmak için kullanılan hafif ve taşınabilir bir formattır.
        **JSON, veri alışverişi için kullanılır (örneğin, API'ler arasında).
        **Metin tabanlıdır ve insanlar tarafından okunabilir.

    JSON Tipik Kullanım Alanları;
        API'lerden veri çekme (GET istekleri).
        Veriyi sunucuya gönderme (POST istekleri).
        Veritabanı kaydı için veri formatı.
        Konfigürasyon dosyaları (örneğin: package.json).

    JSON Kuralları
        **Anahtar-Değer (Key-Value) çiftleri kullanılır.
        **Anahtarlar (keys) çift tırnak içinde olmalıdır.
        **String değerler çift tırnak içinde yazılır.
        **Number, Boolean, null gibi veri tipleri kullanılabilir.
        **Diziler (Arrays) ve Nesneler (Objects) iç içe geçebilir.
    
    JSON'da Özel Karakterler
      **JSON değerlerinde özel karakterler çift tırnak içinde temsil edilir:

        Karakter	Açıklama
        \"	Çift tırnak
        \\	Ters slash
        \n	Yeni satır
        \t	Sekme boşluğu
    
    JSON FORMAT;
    {
        "name": "Ali",
        "age": 25,
        "isStudent": false,
        "courses": ["JavaScript", "HTML", "CSS"],
        "address": {
            "city": "Ankara",
            "postalCode": 06100
    },
        "phoneNumbers": null
    }


    Veri tipleri;

        JSON Tipi	  Örnek
        String	    "name": "Ali"
        Number	    "age": 25
        Boolean	    "isStudent": true
        Null	    "phoneNumbers": null
        Array	    "courses": ["JS", "CSS"]
        Object	    "address": {}

    JSON işlemleri;
        const user = { name: "Ali", age: 25 };
        const jsonString = JSON.stringify(user);
        console.log(jsonString); // '{"name":"Ali","age":25}'
        
    JSON Dönüşümleri;

        JSON --> JavaScript

            const jsonString = '{"name": "Ali", "age": 25}';

            const obj = JSON.parse(jsonString);
            console.log(obj.name); // Ali
            console.log(obj.age);  // 25


        JavaScript --> JSON

            const user = {
                name: "Ayşe",
                age: 30,
                isStudent: true
            };

            const json = JSON.stringify(user);
            console.log(json); 
            // Çıktı: '{"name":"Ayşe","age":30,"isStudent":true}'

    JSON Veri ekleme;

        let jsonString = '{"name": "Ali", "age": 25}';
        let data = JSON.parse(jsonString);

        // Yeni bir alan ekle
        data.city = "Ankara";

        // Var olan bir alanı güncelle
        data.age = 26;

        console.log(data); // { name: 'Ali', age: 26, city: 'Ankara' }

        jsonString = JSON.stringify(data); // Geri JSON formatına çevir
        console.log(jsonString); // '{"name":"Ali","age":26,"city":"Ankara"}'


    JSON Api ile veri çekme;

            fetch("https://jsonplaceholder.typicode.com/posts/1")
            .then(response => response.json()) // JSON'u nesneye çevirir
            .then(data => console.log(data))   // Veriyi kullan
            .catch(error => console.error("Hata:", error));

        
    JSON ARRAY;

        {
         "students": [
            { "name": "Ali", "age": 22 },
            { "name": "Ayşe", "age": 24 }
         ]
        }

        Erişimi;
            const data = {
                students: [
                    { name: "Ali", age: 22 },
                    { name: "Ayşe", age: 24 }
                ]
            };

            console.log(data.students[0].name); // Ali

    
    JSON Nesne;
        {
            "company": "XYZ Ltd.",
            "employees": {
                "manager": { "name": "Ali", "age": 35 },
                "staff": [
                { "name": "Ayşe", "age": 25 },
                { "name": "Mehmet", "age": 28 }
             ]
            }
        }

        Erişimi;
        console.log(data.employees.manager.name); // Ali
        console.log(data.employees.staff[1].name); // Mehmet

    JSON Hata yönetimi;

        const invalidJson = '{"name": "Ali", "age": }'; // Hata: Eksik değer

        try {
        JSON.parse(invalidJson);
        } catch (error) {
        console.error("JSON Hatası:", error.message);
        }
    


    JSON İle GET verisi alma;
        **JSON genellikle REST API'ler ile çalışırken kullanılır.

        fetch("https://jsonplaceholder.typicode.com/users/1")
        .then(response => response.json()) // JSON formatına dönüştür
        .then(data => {
            console.log("Kullanıcı Adı:", data.name);
        })
        .catch(err => console.error("Hata:", err));



    JSON İle POST gönderme;
        **Bir API'ye JSON verisi göndermek için fetch kullanılır.

        const newUser = {
            ame: "Ayşe",
            email: "ayse@example.com"
        };

        fetch("https://jsonplaceholder.typicode.com/users", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(newUser) // JSON formatına çevir
        })
            .then(response => response.json())
            .then(data => console.log("Sunucudan gelen veri:", data))
            .catch(err => console.error("Hata:", err));

    JSON ÇOK KATMANLI VERİ;

        {
            "company": "TechCorp",
            "employees": [
                {
                "name": "Ali",
                "skills": ["JavaScript", "HTML"],
                "address": { "city": "Istanbul", "postalCode": 34000 }
                },
                {
                "name": "Ayşe",
                "skills": ["Python", "Django"],
                "address": { "city": "Ankara", "postalCode": 06100 }
                }
            ]
            }
        VERİYE ERİŞİM;
            const data = {
                company: "TechCorp",
                employees: [
                    { name: "Ali", skills: ["JavaScript", "HTML"], address: { city: "Istanbul" } },
                    { name: "Ayşe", skills: ["Python", "Django"], address: { city: "Ankara" } }
                ]
                };

                console.log(data.employees[0].name);           // Ali
                console.log(data.employees[1].skills[1]);      // Django
                console.log(data.employees[0].address.city);   // Istanbul


JSON İLE VERİ DOĞRULAMA ;

    const jsonString = '{"name": "Ali", "age": 25}';

        try {
            const data = JSON.parse(jsonString);
            console.log("JSON geçerli:", data);
        } catch (error) {
            console.error("Geçersiz JSON:", error.message);
        }







